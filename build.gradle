plugins {
	id "architectury-plugin" version "3.4-SNAPSHOT"
	id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
}

architectury {
	minecraft = rootProject.minecraft_version
}

subprojects {
	apply plugin: "dev.architectury.loom"

	loom {
		silentMojangMappingsLicense()

		// Used to configure existing or new run configurations
		runs {
			client {
				//The below if statements are to add args to your gradle.properties file in user home
				// (for me on windows, I created gradle.properties in %userprofile%\.gradle)
				// (DO NOT add them directly to the gradle.properties file for this project)
				if (project.hasProperty('mc_uuid')) {
					//Your uuid without any dashes in the middle
					programArgs "--uuid", mc_uuid
				}
				if (project.hasProperty('mc_username')) {
					//Your username/display name, this is the name that shows up in chat
					// Note: This is not your email, even if you have a Mojang account
					programArgs "--username", mc_username
				}
			}
		}
	}

	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2' // for @Nonnull
		// The following line declares the mojmap mappings, you may use other mappings as well
		mappings loom.layered() {
			officialMojangMappings()
			//   parchment("org.parchmentmc.data:parchment-${rootProject.mappings}")
		}
	}
}

allprojects {
	apply plugin: "java"
	apply plugin: "architectury-plugin"
	apply plugin: "maven-publish"

	base {
		archivesName = rootProject.archives_base_name
	}

	version = rootProject.mod_version
	group = rootProject.maven_group

	repositories {
		// Add repositories to retrieve artifacts from in here.
		// You should only use this when depending on other mods because
		// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
		// See https://docs.gradle.org/current/userguide/declaring_repositories.html
		// for more information about repositories.
		maven { url "https://squiddev.cc/maven/" }
		maven { url "https://maven.shedaniel.me/" }
		maven { url "https://maven.blamejared.com/" }
		maven { url "https://dvs1.progwml6.com/files/maven/" }
		maven { url 'https://modmaven.dev/' }
		maven { url 'https://jitpack.io' }
		maven { url = "https://maven.theillusivec4.top/" }
		maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }

		exclusiveContent {
			forRepository {
				maven {
					name = "Modrinth"
					url = "https://api.modrinth.com/maven"
				}
			}
			filter {
				includeGroup "maven.modrinth"
			}
		}

		maven {
			url "https://www.cursemaven.com"
			content {
				includeGroup "curse.maven"
			}
		}


		maven {
			name = 'Ladysnake Mods'
			url = 'https://maven.ladysnake.org/releases'
		}

		maven {
			name = "Fuzs Mod Resources"
			url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
		}

		maven {
			name = "Mod Menu Maven"
			url = "https://maven.terraformersmc.com/"
		}

		//Ideally we don't want to embed jar dependencies in the project.
		//flatDir {
		//    dirs '../modlibs'
		//}

	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
		options.release = 17
	}

	java {
		withSourcesJar()
	}
}
