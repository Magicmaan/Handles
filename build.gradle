
import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.dependencies.ModDependency
import com.modrinth.minotaur.dependencies.VersionDependency
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import net.darkhax.curseforgegradle.TaskPublishCurseForge
import net.darkhax.curseforgegradle.UploadArtifact

plugins {
	id "architectury-plugin" version "3.4-SNAPSHOT"
	id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
	id 'net.darkhax.curseforgegradle' version '1.0.14'
	id "com.modrinth.minotaur" version "2.+"
}

def build_number = System.env.BUILD_NUMBER ?: 1
def mod_version_and_build = mod_version + "." + build_number
ext.mod_version_and_build = mod_version_and_build
def release_type = System.env.TC_RELEASE_TYPE ?: "alpha"

architectury {
	minecraft = minecraft_version
}

subprojects {
	apply plugin: "dev.architectury.loom"

	loom {
		silentMojangMappingsLicense()

		// Used to configure existing or new run configurations
		runs {
			client {
				//The below if statements are to add args to your gradle.properties file in user home
				// (for me on windows, I created gradle.properties in %userprofile%\.gradle)
				// (DO NOT add them directly to the gradle.properties file for this project)
				if (project.hasProperty('mc_uuid')) {
					//Your uuid without any dashes in the middle
					programArgs "--uuid", mc_uuid
				}
				if (project.hasProperty('mc_username')) {
					//Your username/display name, this is the name that shows up in chat
					// Note: This is not your email, even if you have a Mojang account
					programArgs "--username", mc_username
				}
			}
		}
	}

	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2' // for @Nonnull
		// The following line declares the mojmap mappings, you may use other mappings as well
		mappings loom.layered() {
			officialMojangMappings()
			//   parchment("org.parchmentmc.data:parchment-${rootProject.mappings}")
		}
	}
}

allprojects {
	apply plugin: "java"
	apply plugin: "architectury-plugin"
	apply plugin: "maven-publish"

	base {
		archivesName = rootProject.archives_base_name
	}

	version = "${minecraft_version}-" + mod_version_and_build
	group = rootProject.maven_group

	repositories {
		// Add repositories to retrieve artifacts from in here.
		// You should only use this when depending on other mods because
		// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
		// See https://docs.gradle.org/current/userguide/declaring_repositories.html
		// for more information about repositories.
		maven { url "https://squiddev.cc/maven/" }
		maven { url "https://maven.shedaniel.me/" }
		maven { url "https://maven.blamejared.com/" }
		maven { url "https://dvs1.progwml6.com/files/maven/" }
		maven { url 'https://modmaven.dev/' }
		maven { url 'https://jitpack.io' }
		maven { url = "https://maven.theillusivec4.top/" }
		maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }

		exclusiveContent {
			forRepository {
				maven {
					name = "Modrinth"
					url = "https://api.modrinth.com/maven"
				}
			}
			filter {
				includeGroup "maven.modrinth"
			}
		}

		maven {
			url "https://www.cursemaven.com"
			content {
				includeGroup "curse.maven"
			}
		}

		maven { url 'https://jitpack.io' }

		maven {
			name = 'Ladysnake Mods'
			url = 'https://maven.ladysnake.org/releases'
		}

		maven {
			name = "Fuzs Mod Resources"
			url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
		}

		maven {
			name = "Mod Menu Maven"
			url = "https://maven.terraformersmc.com/"
		}

		//Ideally we don't want to embed jar dependencies in the project.
		//flatDir {
		//    dirs '../modlibs'
		//}

	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
		options.release = 17
	}

	java {
		withSourcesJar()
	}
}


def resolvedChangelog = null

//closure to generate the changelog once, and only when needed by CurseGradle
def changeLogResolver = { ->
	String generatedChangelog;

	//autogenerated log via teamcity, which uses a generic powershell script to generate a changelog
	def autogeneratedChangelog = project.file("docs/changelog_Handles_${build_number}.txt")
	if (autogeneratedChangelog.exists()) {
		//Add any version specific changelog stuff
		def changelogText = autogeneratedChangelog.getText()
		generatedChangelog = "$changelogText"
	} else {
		generatedChangelog = "Unable to generate changelog :("
	}

	//add hand written log to put at the top
	def releaseNotesFile = project.file("docs/release_${build_number}.txt")
	if (releaseNotesFile.exists()) {
		//Add any version specific changelog stuff
		def releaseNotes = releaseNotesFile.getText()
		generatedChangelog = "$releaseNotes \n\n $generatedChangelog"
	}


	generatedChangelog =
			"This version of Handles is made for use with 'Tardis Refined' :)" +
					"\n\n$generatedChangelog"
	resolvedChangelog = generatedChangelog
	return generatedChangelog
}

if (System.getenv("CURSEFORGE_API_TOKEN") != null || project.hasProperty('curseforge_api_token')) {
	println "Enabling Curseforge config"
	tasks.register("curseforge", TaskPublishCurseForge, { task ->
		setGroup("publishing")
		setDescription("Upload to CurseForge")
		dependsOn(project(":forge").remapJar)

		apiToken = System.getenv("CURSEFORGE_API_TOKEN") ?: project.findProperty("curseforge_api_token")

		def changelog = changeLogResolver.call()

		//forge
		task.upload(304727, project(":forge").remapJar) { main ->
			setGenericCurseArtifactData(main, changelog, release_type, "forge")
			//Include the API jar as a secondary file to the main file
			//withAdditionalFile(apiJar)
			//Add optional deps
			addRequirement(
					'cc-tweaked',
					'tardis-refined',
					//'jade',
					//'curios',
					//'patchouli',
					//'jei'
			)
			//addOptional(
			//		//'jade',
			//		//'curios',
			//		//'patchouli',
			//		//'jei'
			//)
		}
		//fabric
		task.upload(304727, project(":fabric").remapJar) { main ->
			setGenericCurseArtifactData(main, changelog, release_type, "fabric")
			dependsOn(project(":fabric").remapJar)
			addRequirement(
					'cc-restitched',
					'tardis-refined',
			)
		}
	})
}

void setGenericCurseArtifactData(UploadArtifact artifact, String changelog, String release_type, String loader)
{
	artifact.changelog = changelog
	artifact.changelogType = 'text'
	artifact.releaseType = "${release_type}"
	artifact.addModLoader(loader)
}

if (System.getenv("MODRINTH_API_TOKEN") != null || project.hasProperty('modrinth_api_token')) {
	println "Enabling Modrinth config"

	//def forgeModrinth = createModrinthUpload("forge", "zYnlJN4c", forgeJar)
	def fabricModrinth = createSecondaryModrinthUpload("fabric", "zYnlJN4c")

	//configure the modrinth task that is auto generated
	tasks.named('modrinth').configure {
		setGroup("publishing")
		setDescription("Upload to Modrinth")
		//force it to build all platforms first - forge and fabric jars are generated by this task
		dependsOn(tasks.named("build"), project(":forge").remapJar)
		//once forge is uploaded, upload fabric too
		finalizedBy(
				//no need to do forge twice, we upload forge as part of the default task
				//forgeModrinth,
				fabricModrinth
		)
		doFirst {
			println "Enabling Modrinth config"
		}
	}

	//Set all the fields for the default modrinth task
	//These get used by secondary uploads unless overwritten
	modrinth {
		if (System.getenv("MODRINTH_API_TOKEN") == null) {
			//Defaults to modrinth_api_token so we only have to check for a token via gradle properties if there isn't a system property
			getToken().value((String) project.findProperty("modrinth_api_token"))
		} else {
			token = System.getenv("MODRINTH_API_TOKEN")
		}
		projectId = "zYnlJN4c"
		//pass it the mod version and build, so if we don't want to increment version for whatever reason, it wont conflict
		versionNumber = "${mod_version_and_build}"
		versionType = "${release_type}"
		changelog = changeLogResolver.call()
		//uploadFile = project(":forge").remapJar
		uploadFile = file("forge/build/libs/handles-${version}-forge.jar")
		gameVersions = ["1.19.2"] // Must be an array, even with only one version
		loaders = ['forge'] // Self-explanatory.
		//getAdditionalFiles().value([apiJar.get()])
		getDependencies().value([
				//new ModDependency("vvuO3ImH", "optional"),//Curios
				//new ModDependency("nU0bVIaL", "optional"),//Patchouli
				//new ModDependency("nvQzSEkH", "optional"),//Jade
				//new ModDependency("u6dRKJwZ", "optional"),//JEI
				new ModDependency("gu7yAYhd", "required"),//CC: Tweaked
				//new ModDependency("nqVt6aES", "required"),//Tardis Refined
				new VersionDependency("I8A0Dhhj", "required"),//Tardis Refined - force forge version 1.0.1
		])
	}
}

def createSecondaryModrinthUpload(String output, String targetProjectId)
{
	return tasks.register("${output}Modrinth", TaskModrinthUpload, {
		setGroup("publishing")
		setDescription("Upload ${output} to Modrinth")
		dependsOn(tasks.named("modrinth"))
		doFirst {
			//Run in do first to change the configured extension values before it starts applying
			modrinth {
				projectId = targetProjectId
				//uploadFile = project(":fabric").remapJar
				uploadFile = file("${output}/build/libs/handles-${version}-${output}.jar")
				gameVersions = ["1.19.2"] // Must be an array, even with only one version
				loaders = ["${output}"] // Self-explanatory.
				//Clear additional upload files as this is a modification of what things are set to from before
				getAdditionalFiles().empty()

				//todo replace if this function is used for anything but fabric
				getDependencies().value([
						new ModDependency("eldBwa5V", "required"),//CC: Restitched - 1.19.2 only, 1.19.4 and above use cc tweaked
						//new ModDependency("nqVt6aES", "required"),//Tardis Refined
						new VersionDependency("OgVzxIeJ", "required"),//Tardis Refined - force fabric version 1.0.1
				])
			}
			println "Updated Modrinth extension"
		}
	})
}


tasks.register('publishToModSites') {
	publishToModSites.dependsOn tasks.named("modrinth")
	publishToModSites.dependsOn tasks.named("curseforge")
}